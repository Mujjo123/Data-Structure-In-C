#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

// Stack implementation
struct Stack 
{
    int top;
    unsigned capacity;
    int* array;
};

struct Stack* createStack(unsigned capacity) 
{
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*)malloc(stack->capacity * sizeof(int));
    return stack;
}

int isEmpty(struct Stack* stack) 
{
    return stack->top == -1;
}

int isFull(struct Stack* stack) 
{
    return stack->top == stack->capacity - 1;
}

void push(struct Stack* stack, int item) 
{
    if (isFull(stack)) 
    {
        return;
    }
    stack->array[++stack->top] = item;
}

int pop(struct Stack* stack) 
{
    if (isEmpty(stack)) 
    {
        return INT_MIN;
    }
    return stack->array[stack->top--];
}

int evaluatePostfix(char* exp) 
{
    struct Stack* stack = createStack(strlen(exp));
    if (!stack) 
    {
        return -1;
    }

    for (int i = 0; exp[i]; ++i) 
    {
        if (isdigit(exp[i])) {
            push(stack, exp[i] - '0');
        } else {
            int val1 = pop(stack);
            int val2 = pop(stack);
            switch (exp[i]) 
            {
                case '+':
                    push(stack, val2 + val1);
                    break;
                case '-':
                    push(stack, val2 - val1);
                    break;
                case '*':
                    push(stack, val2 * val1);
                    break;
                case '/':
                    push(stack, val2 / val1);
                    break;
            }
        }
    }
    return pop(stack);
}

int main() 
{
    char postfixExpression[100];
    printf("Enter a postfix expression: ");
    gets(postfixExpression);

    int result = evaluatePostfix(postfixExpression);
    printf("Result of the postfix expression: %d\n", result);

    return 0;
}
